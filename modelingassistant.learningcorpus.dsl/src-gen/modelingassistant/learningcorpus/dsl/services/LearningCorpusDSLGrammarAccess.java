/*
 * generated by Xtext 2.23.0
 */
package modelingassistant.learningcorpus.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LearningCorpusDSLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class LearningCorpusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelingassistant.learningcorpus.dsl.LearningCorpusDSL.LearningCorpus");
		private final Assignment cMistakeTypeCategoriesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cMistakeTypeCategoriesMistakeTypeCategoryParserRuleCall_0 = (RuleCall)cMistakeTypeCategoriesAssignment.eContents().get(0);
		
		//LearningCorpus learningcorpus::LearningCorpus:
		//	mistakeTypeCategories+=MistakeTypeCategory*;
		@Override public ParserRule getRule() { return rule; }
		
		//mistakeTypeCategories+=MistakeTypeCategory*
		public Assignment getMistakeTypeCategoriesAssignment() { return cMistakeTypeCategoriesAssignment; }
		
		//MistakeTypeCategory
		public RuleCall getMistakeTypeCategoriesMistakeTypeCategoryParserRuleCall_0() { return cMistakeTypeCategoriesMistakeTypeCategoryParserRuleCall_0; }
	}
	public class MistakeTypeCategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "modelingassistant.learningcorpus.dsl.LearningCorpusDSL.MistakeTypeCategory");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//MistakeTypeCategory learningcorpus::MistakeTypeCategory:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	
	private final LearningCorpusElements pLearningCorpus;
	private final MistakeTypeCategoryElements pMistakeTypeCategory;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LearningCorpusDSLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pLearningCorpus = new LearningCorpusElements();
		this.pMistakeTypeCategory = new MistakeTypeCategoryElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("modelingassistant.learningcorpus.dsl.LearningCorpusDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//LearningCorpus learningcorpus::LearningCorpus:
	//	mistakeTypeCategories+=MistakeTypeCategory*;
	public LearningCorpusElements getLearningCorpusAccess() {
		return pLearningCorpus;
	}
	
	public ParserRule getLearningCorpusRule() {
		return getLearningCorpusAccess().getRule();
	}
	
	//MistakeTypeCategory learningcorpus::MistakeTypeCategory:
	//	name=ID;
	public MistakeTypeCategoryElements getMistakeTypeCategoryAccess() {
		return pMistakeTypeCategory;
	}
	
	public ParserRule getMistakeTypeCategoryRule() {
		return getMistakeTypeCategoryAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
