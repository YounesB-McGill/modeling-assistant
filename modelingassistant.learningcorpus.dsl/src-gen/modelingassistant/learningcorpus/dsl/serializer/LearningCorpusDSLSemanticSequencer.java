/*
 * generated by Xtext 2.23.0
 */
package modelingassistant.learningcorpus.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import learningcorpus.LearningCorpus;
import learningcorpus.LearningItem;
import learningcorpus.LearningcorpusPackage;
import learningcorpus.MistakeType;
import learningcorpus.MistakeTypeCategory;
import modelingassistant.learningcorpus.dsl.services.LearningCorpusDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class LearningCorpusDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private LearningCorpusDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == LearningcorpusPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case LearningcorpusPackage.LEARNING_CORPUS:
				sequence_LearningCorpus(context, (LearningCorpus) semanticObject); 
				return; 
			case LearningcorpusPackage.LEARNING_ITEM:
				sequence_LearningItem(context, (LearningItem) semanticObject); 
				return; 
			case LearningcorpusPackage.MISTAKE_TYPE:
				sequence_MistakeType(context, (MistakeType) semanticObject); 
				return; 
			case LearningcorpusPackage.MISTAKE_TYPE_CATEGORY:
				sequence_MistakeTypeCategory(context, (MistakeTypeCategory) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     LearningCorpus returns LearningCorpus
	 *
	 * Constraint:
	 *     ((mistakeTypeCategories+=MistakeTypeCategory+ learningItems+=LearningItem+) | learningItems+=LearningItem+)?
	 */
	protected void sequence_LearningCorpus(ISerializationContext context, LearningCorpus semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LearningItem returns LearningItem
	 *
	 * Constraint:
	 *     (name=EString description=STRING)
	 */
	protected void sequence_LearningItem(ISerializationContext context, LearningItem semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, LearningcorpusPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LearningcorpusPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, LearningcorpusPackage.Literals.LEARNING_ITEM__DESCRIPTION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, LearningcorpusPackage.Literals.LEARNING_ITEM__DESCRIPTION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLearningItemAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getLearningItemAccess().getDescriptionSTRINGTerminalRuleCall_2_0(), semanticObject.getDescription());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     MistakeTypeCategory returns MistakeTypeCategory
	 *
	 * Constraint:
	 *     (name=EString mistakeTypes+=MistakeType*)
	 */
	protected void sequence_MistakeTypeCategory(ISerializationContext context, MistakeTypeCategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MistakeType returns MistakeType
	 *
	 * Constraint:
	 *     (name=EString atomic?='atomic'? numStepsBeforeNotification=INT? learningItem=[LearningItem|ID])
	 */
	protected void sequence_MistakeType(ISerializationContext context, MistakeType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
