/*
 * generated by Xtext 2.23.0
 */
package modelingassistant.learningcorpus.dsl.serializer;

import com.google.inject.Inject;
import java.util.List;
import modelingassistant.learningcorpus.dsl.services.LearningCorpusDSLGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class LearningCorpusDSLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected LearningCorpusDSLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_MistakeTypeCategory_WSTerminalRuleCall_2_2_a;
	protected AbstractElementAlias match_MistakeTypeCategory___LeftCurlyBracketKeyword_2_0_MistakeTypesKeyword_2_1_WSTerminalRuleCall_2_2_a_LeftCurlyBracketKeyword_2_3_RightCurlyBracketKeyword_2_5_RightCurlyBracketKeyword_2_6__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (LearningCorpusDSLGrammarAccess) access;
		match_MistakeTypeCategory_WSTerminalRuleCall_2_2_a = new TokenAlias(true, true, grammarAccess.getMistakeTypeCategoryAccess().getWSTerminalRuleCall_2_2());
		match_MistakeTypeCategory___LeftCurlyBracketKeyword_2_0_MistakeTypesKeyword_2_1_WSTerminalRuleCall_2_2_a_LeftCurlyBracketKeyword_2_3_RightCurlyBracketKeyword_2_5_RightCurlyBracketKeyword_2_6__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getMistakeTypeCategoryAccess().getLeftCurlyBracketKeyword_2_0()), new TokenAlias(false, false, grammarAccess.getMistakeTypeCategoryAccess().getMistakeTypesKeyword_2_1()), new TokenAlias(true, true, grammarAccess.getMistakeTypeCategoryAccess().getWSTerminalRuleCall_2_2()), new TokenAlias(false, false, grammarAccess.getMistakeTypeCategoryAccess().getLeftCurlyBracketKeyword_2_3()), new TokenAlias(false, false, grammarAccess.getMistakeTypeCategoryAccess().getRightCurlyBracketKeyword_2_5()), new TokenAlias(false, false, grammarAccess.getMistakeTypeCategoryAccess().getRightCurlyBracketKeyword_2_6()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getWSRule())
			return getWSToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal WS         : (' '|'\t'|'\r'|'\n')+;
	 */
	protected String getWSToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return " ";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_MistakeTypeCategory_WSTerminalRuleCall_2_2_a.equals(syntax))
				emit_MistakeTypeCategory_WSTerminalRuleCall_2_2_a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_MistakeTypeCategory___LeftCurlyBracketKeyword_2_0_MistakeTypesKeyword_2_1_WSTerminalRuleCall_2_2_a_LeftCurlyBracketKeyword_2_3_RightCurlyBracketKeyword_2_5_RightCurlyBracketKeyword_2_6__q.equals(syntax))
				emit_MistakeTypeCategory___LeftCurlyBracketKeyword_2_0_MistakeTypesKeyword_2_1_WSTerminalRuleCall_2_2_a_LeftCurlyBracketKeyword_2_3_RightCurlyBracketKeyword_2_5_RightCurlyBracketKeyword_2_6__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     WS*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString '{' 'mistakeTypes' (ambiguity) '{' mistakeTypes+=MistakeType
	 */
	protected void emit_MistakeTypeCategory_WSTerminalRuleCall_2_2_a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (
	  *         '{' 
	  *         'mistakeTypes' 
	  *         WS* 
	  *         '{' 
	  *         '}' 
	  *         '}'
	  *     )?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=EString (ambiguity) (rule end)
	 */
	protected void emit_MistakeTypeCategory___LeftCurlyBracketKeyword_2_0_MistakeTypesKeyword_2_1_WSTerminalRuleCall_2_2_a_LeftCurlyBracketKeyword_2_3_RightCurlyBracketKeyword_2_5_RightCurlyBracketKeyword_2_6__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
