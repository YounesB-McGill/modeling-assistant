/*
 * generated by Xtext 2.23.0
 */
grammar InternalLearningCorpusDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package modelingassistant.learningcorpus.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package modelingassistant.learningcorpus.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import modelingassistant.learningcorpus.dsl.services.LearningCorpusDSLGrammarAccess;

}

@parser::members {

 	private LearningCorpusDSLGrammarAccess grammarAccess;

    public InternalLearningCorpusDSLParser(TokenStream input, LearningCorpusDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LearningCorpus";
   	}

   	@Override
   	protected LearningCorpusDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLearningCorpus
entryRuleLearningCorpus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLearningCorpusRule()); }
	iv_ruleLearningCorpus=ruleLearningCorpus
	{ $current=$iv_ruleLearningCorpus.current; }
	EOF;

// Rule LearningCorpus
ruleLearningCorpus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getLearningCorpusAccess().getMistakeTypeCategoriesMistakeTypeCategoryParserRuleCall_0());
			}
			lv_mistakeTypeCategories_0_0=ruleMistakeTypeCategory
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getLearningCorpusRule());
				}
				add(
					$current,
					"mistakeTypeCategories",
					lv_mistakeTypeCategories_0_0,
					"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.MistakeTypeCategory");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleMistakeTypeCategory
entryRuleMistakeTypeCategory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMistakeTypeCategoryRule()); }
	iv_ruleMistakeTypeCategory=ruleMistakeTypeCategory
	{ $current=$iv_ruleMistakeTypeCategory.current; }
	EOF;

// Rule MistakeTypeCategory
ruleMistakeTypeCategory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getMistakeTypeCategoryAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMistakeTypeCategoryRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
