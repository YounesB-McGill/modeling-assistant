/*
 * generated by Xtext 2.23.0
 */
grammar InternalLearningCorpusDSL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package modelingassistant.learningcorpus.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package modelingassistant.learningcorpus.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import modelingassistant.learningcorpus.dsl.services.LearningCorpusDSLGrammarAccess;

}

@parser::members {

 	private LearningCorpusDSLGrammarAccess grammarAccess;

    public InternalLearningCorpusDSLParser(TokenStream input, LearningCorpusDSLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "LearningCorpus";
   	}

   	@Override
   	protected LearningCorpusDSLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleLearningCorpus
entryRuleLearningCorpus returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLearningCorpusRule()); }
	iv_ruleLearningCorpus=ruleLearningCorpus
	{ $current=$iv_ruleLearningCorpus.current; }
	EOF;

// Rule LearningCorpus
ruleLearningCorpus returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLearningCorpusAccess().getMistakeTypeCategoriesMistakeTypeCategoryParserRuleCall_0_0());
				}
				lv_mistakeTypeCategories_0_0=ruleMistakeTypeCategory
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLearningCorpusRule());
					}
					add(
						$current,
						"mistakeTypeCategories",
						lv_mistakeTypeCategories_0_0,
						"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.MistakeTypeCategory");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getLearningCorpusAccess().getLearningItemsLearningItemParserRuleCall_1_0());
				}
				lv_learningItems_1_0=ruleLearningItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLearningCorpusRule());
					}
					add(
						$current,
						"learningItems",
						lv_learningItems_1_0,
						"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.LearningItem");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleMistakeTypeCategory
entryRuleMistakeTypeCategory returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMistakeTypeCategoryRule()); }
	iv_ruleMistakeTypeCategory=ruleMistakeTypeCategory
	{ $current=$iv_ruleMistakeTypeCategory.current; }
	EOF;

// Rule MistakeTypeCategory
ruleMistakeTypeCategory returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='MistakeTypeCategory'
		{
			newLeafNode(otherlv_0, grammarAccess.getMistakeTypeCategoryAccess().getMistakeTypeCategoryKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMistakeTypeCategoryAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMistakeTypeCategoryRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_2='{'
			{
				newLeafNode(otherlv_2, grammarAccess.getMistakeTypeCategoryAccess().getLeftCurlyBracketKeyword_2_0());
			}
			otherlv_3='mistakeTypes'
			{
				newLeafNode(otherlv_3, grammarAccess.getMistakeTypeCategoryAccess().getMistakeTypesKeyword_2_1());
			}
			(
				this_WS_4=RULE_WS
				{
					newLeafNode(this_WS_4, grammarAccess.getMistakeTypeCategoryAccess().getWSTerminalRuleCall_2_2());
				}
			)*
			otherlv_5='{'
			{
				newLeafNode(otherlv_5, grammarAccess.getMistakeTypeCategoryAccess().getLeftCurlyBracketKeyword_2_3());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMistakeTypeCategoryAccess().getMistakeTypesMistakeTypeParserRuleCall_2_4_0());
					}
					lv_mistakeTypes_6_0=ruleMistakeType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMistakeTypeCategoryRule());
						}
						add(
							$current,
							"mistakeTypes",
							lv_mistakeTypes_6_0,
							"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.MistakeType");
						afterParserOrEnumRuleCall();
					}
				)
			)*
			otherlv_7='}'
			{
				newLeafNode(otherlv_7, grammarAccess.getMistakeTypeCategoryAccess().getRightCurlyBracketKeyword_2_5());
			}
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getMistakeTypeCategoryAccess().getRightCurlyBracketKeyword_2_6());
			}
		)?
	)
;

// Entry rule entryRuleMistakeType
entryRuleMistakeType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMistakeTypeRule()); }
	iv_ruleMistakeType=ruleMistakeType
	{ $current=$iv_ruleMistakeType.current; }
	EOF;

// Rule MistakeType
ruleMistakeType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mistake'
		{
			newLeafNode(otherlv_0, grammarAccess.getMistakeTypeAccess().getMistakeKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMistakeTypeAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMistakeTypeRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_atomic_2_0='atomic'
				{
					newLeafNode(lv_atomic_2_0, grammarAccess.getMistakeTypeAccess().getAtomicAtomicKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMistakeTypeRule());
					}
					setWithLastConsumed($current, "atomic", lv_atomic_2_0 != null, "atomic");
				}
			)
		)?
		(
			(
				lv_numStepsBeforeNotification_3_0=RULE_INT
				{
					newLeafNode(lv_numStepsBeforeNotification_3_0, grammarAccess.getMistakeTypeAccess().getNumStepsBeforeNotificationINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMistakeTypeRule());
					}
					setWithLastConsumed(
						$current,
						"numStepsBeforeNotification",
						lv_numStepsBeforeNotification_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)?
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMistakeTypeRule());
					}
				}
				otherlv_4=RULE_ID
				{
					newLeafNode(otherlv_4, grammarAccess.getMistakeTypeAccess().getLearningItemLearningItemCrossReference_4_0());
				}
			)
		)
	)
;

// Entry rule entryRuleLearningItem
entryRuleLearningItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLearningItemRule()); }
	iv_ruleLearningItem=ruleLearningItem
	{ $current=$iv_ruleLearningItem.current; }
	EOF;

// Rule LearningItem
ruleLearningItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='LearningItem'
		{
			newLeafNode(otherlv_0, grammarAccess.getLearningItemAccess().getLearningItemKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLearningItemAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLearningItemRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"modelingassistant.learningcorpus.dsl.LearningCorpusDSL.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_description_2_0=RULE_STRING
				{
					newLeafNode(lv_description_2_0, grammarAccess.getLearningItemAccess().getDescriptionSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLearningItemRule());
					}
					setWithLastConsumed(
						$current,
						"description",
						lv_description_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
