/*
 * generated by Xtext 2.23.0
 */
package modelingassistant.learningcorpus.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import modelingassistant.learningcorpus.dsl.ide.contentassist.antlr.internal.InternalLearningCorpusDSLParser;
import modelingassistant.learningcorpus.dsl.services.LearningCorpusDSLGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LearningCorpusDSLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LearningCorpusDSLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LearningCorpusDSLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getLearningCorpusAccess().getGroup(), "rule__LearningCorpus__Group__0");
			builder.put(grammarAccess.getMistakeTypeCategoryAccess().getGroup(), "rule__MistakeTypeCategory__Group__0");
			builder.put(grammarAccess.getMistakeTypeCategoryAccess().getGroup_2(), "rule__MistakeTypeCategory__Group_2__0");
			builder.put(grammarAccess.getMistakeTypeAccess().getGroup(), "rule__MistakeType__Group__0");
			builder.put(grammarAccess.getLearningItemAccess().getGroup(), "rule__LearningItem__Group__0");
			builder.put(grammarAccess.getLearningCorpusAccess().getMistakeTypeCategoriesAssignment_0(), "rule__LearningCorpus__MistakeTypeCategoriesAssignment_0");
			builder.put(grammarAccess.getLearningCorpusAccess().getLearningItemsAssignment_1(), "rule__LearningCorpus__LearningItemsAssignment_1");
			builder.put(grammarAccess.getMistakeTypeCategoryAccess().getNameAssignment_1(), "rule__MistakeTypeCategory__NameAssignment_1");
			builder.put(grammarAccess.getMistakeTypeCategoryAccess().getMistakeTypesAssignment_2_4(), "rule__MistakeTypeCategory__MistakeTypesAssignment_2_4");
			builder.put(grammarAccess.getMistakeTypeAccess().getNameAssignment_1(), "rule__MistakeType__NameAssignment_1");
			builder.put(grammarAccess.getMistakeTypeAccess().getAtomicAssignment_2(), "rule__MistakeType__AtomicAssignment_2");
			builder.put(grammarAccess.getMistakeTypeAccess().getNumStepsBeforeNotificationAssignment_3(), "rule__MistakeType__NumStepsBeforeNotificationAssignment_3");
			builder.put(grammarAccess.getMistakeTypeAccess().getLearningItemAssignment_4(), "rule__MistakeType__LearningItemAssignment_4");
			builder.put(grammarAccess.getLearningItemAccess().getNameAssignment_1(), "rule__LearningItem__NameAssignment_1");
			builder.put(grammarAccess.getLearningItemAccess().getDescriptionAssignment_2(), "rule__LearningItem__DescriptionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LearningCorpusDSLGrammarAccess grammarAccess;

	@Override
	protected InternalLearningCorpusDSLParser createParser() {
		InternalLearningCorpusDSLParser result = new InternalLearningCorpusDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LearningCorpusDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LearningCorpusDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
