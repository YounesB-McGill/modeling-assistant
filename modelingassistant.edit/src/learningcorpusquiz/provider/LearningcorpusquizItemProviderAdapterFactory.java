/**
 */
package learningcorpusquiz.provider;

import java.util.ArrayList;
import java.util.Collection;

import learningcorpusquiz.util.LearningcorpusquizAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class LearningcorpusquizItemProviderAdapterFactory extends LearningcorpusquizAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LearningcorpusquizItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.FillInTheBlanksQuiz} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FillInTheBlanksQuizItemProvider fillInTheBlanksQuizItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.FillInTheBlanksQuiz}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFillInTheBlanksQuizAdapter() {
    if (fillInTheBlanksQuizItemProvider == null) {
      fillInTheBlanksQuizItemProvider = new FillInTheBlanksQuizItemProvider(this);
    }

    return fillInTheBlanksQuizItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.ListMultipleChoiceQuiz} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ListMultipleChoiceQuizItemProvider listMultipleChoiceQuizItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.ListMultipleChoiceQuiz}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createListMultipleChoiceQuizAdapter() {
    if (listMultipleChoiceQuizItemProvider == null) {
      listMultipleChoiceQuizItemProvider = new ListMultipleChoiceQuizItemProvider(this);
    }

    return listMultipleChoiceQuizItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.TableMultipleChoiceQuiz} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableMultipleChoiceQuizItemProvider tableMultipleChoiceQuizItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.TableMultipleChoiceQuiz}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTableMultipleChoiceQuizAdapter() {
    if (tableMultipleChoiceQuizItemProvider == null) {
      tableMultipleChoiceQuizItemProvider = new TableMultipleChoiceQuizItemProvider(this);
    }

    return tableMultipleChoiceQuizItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.FillInTheBlanksQuizStatement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FillInTheBlanksQuizStatementItemProvider fillInTheBlanksQuizStatementItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.FillInTheBlanksQuizStatement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFillInTheBlanksQuizStatementAdapter() {
    if (fillInTheBlanksQuizStatementItemProvider == null) {
      fillInTheBlanksQuizStatementItemProvider = new FillInTheBlanksQuizStatementItemProvider(this);
    }

    return fillInTheBlanksQuizStatementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.FillInTheBlanksQuizStatementComponent} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FillInTheBlanksQuizStatementComponentItemProvider fillInTheBlanksQuizStatementComponentItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.FillInTheBlanksQuizStatementComponent}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createFillInTheBlanksQuizStatementComponentAdapter() {
    if (fillInTheBlanksQuizStatementComponentItemProvider == null) {
      fillInTheBlanksQuizStatementComponentItemProvider = new FillInTheBlanksQuizStatementComponentItemProvider(this);
    }

    return fillInTheBlanksQuizStatementComponentItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.NonBlank} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NonBlankItemProvider nonBlankItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.NonBlank}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNonBlankAdapter() {
    if (nonBlankItemProvider == null) {
      nonBlankItemProvider = new NonBlankItemProvider(this);
    }

    return nonBlankItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.Blank} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BlankItemProvider blankItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.Blank}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createBlankAdapter() {
    if (blankItemProvider == null) {
      blankItemProvider = new BlankItemProvider(this);
    }

    return blankItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.Choice} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChoiceItemProvider choiceItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.Choice}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createChoiceAdapter() {
    if (choiceItemProvider == null) {
      choiceItemProvider = new ChoiceItemProvider(this);
    }

    return choiceItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.TableMcqCorrectEntry} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableMcqCorrectEntryItemProvider tableMcqCorrectEntryItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.TableMcqCorrectEntry}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTableMcqCorrectEntryAdapter() {
    if (tableMcqCorrectEntryItemProvider == null) {
      tableMcqCorrectEntryItemProvider = new TableMcqCorrectEntryItemProvider(this);
    }

    return tableMcqCorrectEntryItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.TableMcqRowItem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableMcqRowItemItemProvider tableMcqRowItemItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.TableMcqRowItem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTableMcqRowItemAdapter() {
    if (tableMcqRowItemItemProvider == null) {
      tableMcqRowItemItemProvider = new TableMcqRowItemItemProvider(this);
    }

    return tableMcqRowItemItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link learningcorpusquiz.TableMcqColumnItem} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TableMcqColumnItemItemProvider tableMcqColumnItemItemProvider;

  /**
   * This creates an adapter for a {@link learningcorpusquiz.TableMcqColumnItem}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTableMcqColumnItemAdapter() {
    if (tableMcqColumnItemItemProvider == null) {
      tableMcqColumnItemItemProvider = new TableMcqColumnItemItemProvider(this);
    }

    return tableMcqColumnItemItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void dispose() {
    if (fillInTheBlanksQuizItemProvider != null) fillInTheBlanksQuizItemProvider.dispose();
    if (listMultipleChoiceQuizItemProvider != null) listMultipleChoiceQuizItemProvider.dispose();
    if (tableMultipleChoiceQuizItemProvider != null) tableMultipleChoiceQuizItemProvider.dispose();
    if (fillInTheBlanksQuizStatementItemProvider != null) fillInTheBlanksQuizStatementItemProvider.dispose();
    if (fillInTheBlanksQuizStatementComponentItemProvider != null) fillInTheBlanksQuizStatementComponentItemProvider.dispose();
    if (nonBlankItemProvider != null) nonBlankItemProvider.dispose();
    if (blankItemProvider != null) blankItemProvider.dispose();
    if (choiceItemProvider != null) choiceItemProvider.dispose();
    if (tableMcqCorrectEntryItemProvider != null) tableMcqCorrectEntryItemProvider.dispose();
    if (tableMcqRowItemItemProvider != null) tableMcqRowItemItemProvider.dispose();
    if (tableMcqColumnItemItemProvider != null) tableMcqColumnItemItemProvider.dispose();
  }

}
