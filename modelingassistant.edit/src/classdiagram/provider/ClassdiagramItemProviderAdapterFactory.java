/**
 */
package classdiagram.provider;

import classdiagram.util.ClassdiagramAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ClassdiagramItemProviderAdapterFactory extends ClassdiagramAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
  /**
   * This keeps track of the root adapter factory that delegates to this adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ComposedAdapterFactory parentAdapterFactory;

  /**
   * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IChangeNotifier changeNotifier = new ChangeNotifier();

  /**
   * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected Collection<Object> supportedTypes = new ArrayList<Object>();

  /**
   * This constructs an instance.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ClassdiagramItemProviderAdapterFactory() {
    supportedTypes.add(IEditingDomainItemProvider.class);
    supportedTypes.add(IStructuredItemContentProvider.class);
    supportedTypes.add(ITreeItemContentProvider.class);
    supportedTypes.add(IItemLabelProvider.class);
    supportedTypes.add(IItemPropertySource.class);
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Parameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ParameterItemProvider parameterItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Parameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createParameterAdapter() {
    if (parameterItemProvider == null) {
      parameterItemProvider = new ParameterItemProvider(this);
    }

    return parameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Attribute} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeItemProvider attributeItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Attribute}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAttributeAdapter() {
    if (attributeItemProvider == null) {
      attributeItemProvider = new AttributeItemProvider(this);
    }

    return attributeItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Operation} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OperationItemProvider operationItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Operation}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createOperationAdapter() {
    if (operationItemProvider == null) {
      operationItemProvider = new OperationItemProvider(this);
    }

    return operationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Class} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassItemProvider classItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Class}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassAdapter() {
    if (classItemProvider == null) {
      classItemProvider = new ClassItemProvider(this);
    }

    return classItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.TypeParameter} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TypeParameterItemProvider typeParameterItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.TypeParameter}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createTypeParameterAdapter() {
    if (typeParameterItemProvider == null) {
      typeParameterItemProvider = new TypeParameterItemProvider(this);
    }

    return typeParameterItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Association} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationItemProvider associationItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Association}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssociationAdapter() {
    if (associationItemProvider == null) {
      associationItemProvider = new AssociationItemProvider(this);
    }

    return associationItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.AssociationEnd} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AssociationEndItemProvider associationEndItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.AssociationEnd}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createAssociationEndAdapter() {
    if (associationEndItemProvider == null) {
      associationEndItemProvider = new AssociationEndItemProvider(this);
    }

    return associationEndItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.ClassDiagram} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClassDiagramItemProvider classDiagramItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.ClassDiagram}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createClassDiagramAdapter() {
    if (classDiagramItemProvider == null) {
      classDiagramItemProvider = new ClassDiagramItemProvider(this);
    }

    return classDiagramItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.ImplementationClass} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ImplementationClassItemProvider implementationClassItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.ImplementationClass}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createImplementationClassAdapter() {
    if (implementationClassItemProvider == null) {
      implementationClassItemProvider = new ImplementationClassItemProvider(this);
    }

    return implementationClassItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Note} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NoteItemProvider noteItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Note}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createNoteAdapter() {
    if (noteItemProvider == null) {
      noteItemProvider = new NoteItemProvider(this);
    }

    return noteItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ElementMapItemProvider elementMapItemProvider;

  /**
   * This creates an adapter for a {@link java.util.Map.Entry}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createElementMapAdapter() {
    if (elementMapItemProvider == null) {
      elementMapItemProvider = new ElementMapItemProvider(this);
    }

    return elementMapItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.Layout} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LayoutItemProvider layoutItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.Layout}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLayoutAdapter() {
    if (layoutItemProvider == null) {
      layoutItemProvider = new LayoutItemProvider(this);
    }

    return layoutItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.LayoutElement} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LayoutElementItemProvider layoutElementItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.LayoutElement}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createLayoutElementAdapter() {
    if (layoutElementItemProvider == null) {
      layoutElementItemProvider = new LayoutElementItemProvider(this);
    }

    return layoutElementItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link java.util.Map.Entry} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ContainerMapItemProvider containerMapItemProvider;

  /**
   * This creates an adapter for a {@link java.util.Map.Entry}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createContainerMapAdapter() {
    if (containerMapItemProvider == null) {
      containerMapItemProvider = new ContainerMapItemProvider(this);
    }

    return containerMapItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDBoolean} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDBooleanItemProvider cdBooleanItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDBoolean}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDBooleanAdapter() {
    if (cdBooleanItemProvider == null) {
      cdBooleanItemProvider = new CDBooleanItemProvider(this);
    }

    return cdBooleanItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDDouble} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDDoubleItemProvider cdDoubleItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDDouble}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDDoubleAdapter() {
    if (cdDoubleItemProvider == null) {
      cdDoubleItemProvider = new CDDoubleItemProvider(this);
    }

    return cdDoubleItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDInt} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDIntItemProvider cdIntItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDInt}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDIntAdapter() {
    if (cdIntItemProvider == null) {
      cdIntItemProvider = new CDIntItemProvider(this);
    }

    return cdIntItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDLong} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDLongItemProvider cdLongItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDLong}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDLongAdapter() {
    if (cdLongItemProvider == null) {
      cdLongItemProvider = new CDLongItemProvider(this);
    }

    return cdLongItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDString} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDStringItemProvider cdStringItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDString}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDStringAdapter() {
    if (cdStringItemProvider == null) {
      cdStringItemProvider = new CDStringItemProvider(this);
    }

    return cdStringItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDByte} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDByteItemProvider cdByteItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDByte}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDByteAdapter() {
    if (cdByteItemProvider == null) {
      cdByteItemProvider = new CDByteItemProvider(this);
    }

    return cdByteItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDFloat} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDFloatItemProvider cdFloatItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDFloat}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDFloatAdapter() {
    if (cdFloatItemProvider == null) {
      cdFloatItemProvider = new CDFloatItemProvider(this);
    }

    return cdFloatItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDArray} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDArrayItemProvider cdArrayItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDArray}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDArrayAdapter() {
    if (cdArrayItemProvider == null) {
      cdArrayItemProvider = new CDArrayItemProvider(this);
    }

    return cdArrayItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDChar} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDCharItemProvider cdCharItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDChar}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDCharAdapter() {
    if (cdCharItemProvider == null) {
      cdCharItemProvider = new CDCharItemProvider(this);
    }

    return cdCharItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDEnum} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDEnumItemProvider cdEnumItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDEnum}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDEnumAdapter() {
    if (cdEnumItemProvider == null) {
      cdEnumItemProvider = new CDEnumItemProvider(this);
    }

    return cdEnumItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDEnumLiteral} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDEnumLiteralItemProvider cdEnumLiteralItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDEnumLiteral}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDEnumLiteralAdapter() {
    if (cdEnumLiteralItemProvider == null) {
      cdEnumLiteralItemProvider = new CDEnumLiteralItemProvider(this);
    }

    return cdEnumLiteralItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDAny} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDAnyItemProvider cdAnyItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDAny}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDAnyAdapter() {
    if (cdAnyItemProvider == null) {
      cdAnyItemProvider = new CDAnyItemProvider(this);
    }

    return cdAnyItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDVoid} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDVoidItemProvider cdVoidItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDVoid}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDVoidAdapter() {
    if (cdVoidItemProvider == null) {
      cdVoidItemProvider = new CDVoidItemProvider(this);
    }

    return cdVoidItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDSet} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDSetItemProvider cdSetItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDSet}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDSetAdapter() {
    if (cdSetItemProvider == null) {
      cdSetItemProvider = new CDSetItemProvider(this);
    }

    return cdSetItemProvider;
  }

  /**
   * This keeps track of the one adapter used for all {@link classdiagram.CDSequence} instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CDSequenceItemProvider cdSequenceItemProvider;

  /**
   * This creates an adapter for a {@link classdiagram.CDSequence}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter createCDSequenceAdapter() {
    if (cdSequenceItemProvider == null) {
      cdSequenceItemProvider = new CDSequenceItemProvider(this);
    }

    return cdSequenceItemProvider;
  }

  /**
   * This returns the root adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ComposeableAdapterFactory getRootAdapterFactory() {
    return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
  }

  /**
   * This sets the composed adapter factory that contains this factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
    this.parentAdapterFactory = parentAdapterFactory;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object type) {
    return supportedTypes.contains(type) || super.isFactoryForType(type);
  }

  /**
   * This implementation substitutes the factory itself as the key for the adapter.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Adapter adapt(Notifier notifier, Object type) {
    return super.adapt(notifier, this);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object adapt(Object object, Object type) {
    if (isFactoryForType(type)) {
      Object adapter = super.adapt(object, type);
      if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
        return adapter;
      }
    }

    return null;
  }

  /**
   * This adds a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void addListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.addListener(notifyChangedListener);
  }

  /**
   * This removes a listener.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void removeListener(INotifyChangedListener notifyChangedListener) {
    changeNotifier.removeListener(notifyChangedListener);
  }

  /**
   * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void fireNotifyChanged(Notification notification) {
    changeNotifier.fireNotifyChanged(notification);

    if (parentAdapterFactory != null) {
      parentAdapterFactory.fireNotifyChanged(notification);
    }
  }

  /**
   * This disposes all of the item providers created by this factory. 
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void dispose() {
    if (parameterItemProvider != null) parameterItemProvider.dispose();
    if (attributeItemProvider != null) attributeItemProvider.dispose();
    if (operationItemProvider != null) operationItemProvider.dispose();
    if (classItemProvider != null) classItemProvider.dispose();
    if (typeParameterItemProvider != null) typeParameterItemProvider.dispose();
    if (associationItemProvider != null) associationItemProvider.dispose();
    if (associationEndItemProvider != null) associationEndItemProvider.dispose();
    if (classDiagramItemProvider != null) classDiagramItemProvider.dispose();
    if (implementationClassItemProvider != null) implementationClassItemProvider.dispose();
    if (noteItemProvider != null) noteItemProvider.dispose();
    if (elementMapItemProvider != null) elementMapItemProvider.dispose();
    if (layoutItemProvider != null) layoutItemProvider.dispose();
    if (layoutElementItemProvider != null) layoutElementItemProvider.dispose();
    if (containerMapItemProvider != null) containerMapItemProvider.dispose();
    if (cdBooleanItemProvider != null) cdBooleanItemProvider.dispose();
    if (cdDoubleItemProvider != null) cdDoubleItemProvider.dispose();
    if (cdIntItemProvider != null) cdIntItemProvider.dispose();
    if (cdLongItemProvider != null) cdLongItemProvider.dispose();
    if (cdStringItemProvider != null) cdStringItemProvider.dispose();
    if (cdByteItemProvider != null) cdByteItemProvider.dispose();
    if (cdFloatItemProvider != null) cdFloatItemProvider.dispose();
    if (cdArrayItemProvider != null) cdArrayItemProvider.dispose();
    if (cdCharItemProvider != null) cdCharItemProvider.dispose();
    if (cdEnumItemProvider != null) cdEnumItemProvider.dispose();
    if (cdEnumLiteralItemProvider != null) cdEnumLiteralItemProvider.dispose();
    if (cdAnyItemProvider != null) cdAnyItemProvider.dispose();
    if (cdVoidItemProvider != null) cdVoidItemProvider.dispose();
    if (cdSetItemProvider != null) cdSetItemProvider.dispose();
    if (cdSequenceItemProvider != null) cdSequenceItemProvider.dispose();
  }

}
