[comment encoding = UTF-8 /]
[module generate('http://cs.mcgill.ca/sel/modelingassistant/learningcorpus/1.0')]

[**
 * Generates Markdown table-of-contents from input modeling assistant via MarkdownGenerator, implemented in Java.
 */]
[query public generateMarkdown(learningCorpus : LearningCorpus) : String
  = invoke('org.eclipse.acceleo.module.sample.main.MarkdownGenerator',
    'generate(learningcorpus.LearningCorpus)',
    Sequence{learningCorpus})
/]

[**
 * Generates mistake types from input category via PythonGenerator, implemented in Java.
 */]
[query public generatePythonMistakeTypes(mtc : MistakeTypeCategory) : String
  = invoke('org.eclipse.acceleo.module.sample.main.PythonGenerator',
    'generatePythonMistakeTypes(learningcorpus.MistakeTypeCategory)',
    Sequence{mtc})
/]

[**
 * Underscorifies and capitalizes the given input string, omitting any information in parentheses.
 * Example: "Extra (redundant) class" > "EXTRA_CLASS"
 */]
[query public underscorify(s : String) : String
  = s.replaceAll('\\((.+?)\\)', '').trim()
     .replaceAll('/', '_').replaceAll('-', '_').replaceAll('\\s+', '_').replaceAll('_+', '_').toUpper()
/]

[**
 * Gets all the mistake types of the given learning corpus.
 */]
[query public mistakeTypes(learningCorpus : LearningCorpus) : Collection(MistakeType)
  = invoke('org.eclipse.acceleo.module.sample.main.Generate',
    'getMistakeTypes(learningcorpus.LearningCorpus)',
    Sequence{learningCorpus})
/]

[template public generateElement(learningCorpus : LearningCorpus)]
[comment @main/]
[file ('../../modelingassistant/src/learningcorpus/mistaketypes/MistakeTypes.java', false, 'UTF-8')]
package learningcorpus.mistaketypes;

import java.util.HashMap;
import java.util.Map;
import learningcorpus.LearningCorpus;
import learningcorpus.MistakeType;
import learningcorpus.MistakeTypeCategory;

/**
 * This class contains all mistake types and categories.
 */
public class MistakeTypes {

  /** The path of the learning corpus instance with mistake types. */
  public static final String LEARNING_CORPUS_PATH =
      "../modelingassistant.learningcorpus.dsl.instances/test.learningcorpus";

  /** Map of mistake type categories by name. */
  public static final Map<String, MistakeTypeCategory> MISTAKE_TYPE_CATEGORIES_BY_NAME =
      new HashMap<String, MistakeTypeCategory>();

  /** Map of mistake types by name. */
  public static final Map<String, MistakeType> MISTAKE_TYPES_BY_NAME = new HashMap<String, MistakeType>();

  // Short-name references to the above maps for greater code legibility
  private static final Map<String, MistakeTypeCategory> MTCS = MISTAKE_TYPE_CATEGORIES_BY_NAME;
  private static final Map<String, MistakeType> MTS = MISTAKE_TYPES_BY_NAME;

  static {
    var learningCorpus = LearningCorpus.fromFile(LEARNING_CORPUS_PATH);

    learningCorpus.getMistakeTypeCategories().forEach(mtc ->
        MISTAKE_TYPE_CATEGORIES_BY_NAME.put(mtc.getName(), mtc));

    learningCorpus.getMistakeTypes().forEach(mt ->
        MISTAKE_TYPES_BY_NAME.put(mt.getName(), mt));
  }


  // Mistake type categories

  [for(mTC : MistakeTypeCategory | learningCorpus.mistakeTypeCategories)]
  [let lhs : String = 'public static final MistakeTypeCategory ' +
    underscorify(mTC.name)
  ]
  [let rhs : String = 'MTCS.get("' + mTC.name + '");']
  [let mtcDecl : String = lhs + ' = ' + rhs]
  /** The [mTC.name.toLower()/] mistake type category. */
  [if (mtcDecl.size() < 119)]
  [mtcDecl/]
  [/if]
  [if (mtcDecl.size() > 118)]
  [lhs + ' =\n      ' + rhs/]
  [/if]

  [/let] 
  [/let]
  [/let]
  [/for]

  // Mistake types

  [for(mT : MistakeType | mistakeTypes(learningCorpus))]
  [let lhs : String = 'public static final MistakeType ' +
    underscorify(mT.name)
  ]
  [let rhs : String = 'MTS.get("' + mT.name + '");']
  [let mtDecl : String = lhs + ' = ' + rhs
  ]
  /** The [mT.name.toLower()/] mistake type. */
  [if (mtDecl.size() < 119)]
  [mtDecl/]
  [/if]
  [if (mtDecl.size() > 118)]
  [lhs + ' =\n      ' + rhs/]
  [/if]

  [/let] 
  [/let]
  [/let]
  [/for]
}
[/file]

[file ('../../modelingassistant/pythonclient/mistaketypes.py', false, 'UTF-8')]
"""
This file contains all mistake types and categories.
"""

from fileserdes import load_lc
from learningcorpus.learningcorpus import MistakeTypeCategory, MistakeType

LEARNING_CORPUS_PATH = "modelingassistant.learningcorpus.dsl.instances/test.learningcorpus"
corpus = load_lc(LEARNING_CORPUS_PATH)

# Populate dictionaries
MISTAKE_TYPE_CATEGORIES_BY_NAME: dict[ '[' /]str, MistakeTypeCategory[ ']' /] = {c.name: c for c in corpus.mistakeTypeCategories}
MISTAKE_TYPES_BY_NAME: dict[ '[' /]str, MistakeType[ ']' /] = {mt.name: mt for mt in corpus.mistakeTypes()}

# Short-name references to the above maps for greater code legibility
_MTCS = MISTAKE_TYPE_CATEGORIES_BY_NAME
_MTS = MISTAKE_TYPES_BY_NAME

_dynamic_mtc_type = type(list(_MTCS.values())[ '[' /]0[ ']' /])
_dynamic_mt_type = type(list(_MTS.values())[ '[' /]0[ ']' /])

# Mistake type categories
[for(mTC : MistakeTypeCategory | learningCorpus.mistakeTypeCategories)]
[let lhs : String = underscorify(mTC.name)
  + ': MistakeTypeCategory'
]
[let rhs : String = '_MTCS["' + mTC.name + '"]']
[let mtcDecl : String = lhs + ' = ' + rhs]
[if (mtcDecl.size() < 121)]
[mtcDecl/]
[/if]
[if (mtcDecl.size() > 120)]
[lhs + ' = \\\n    ' + rhs/]
[/if]
[/let] 
[/let]
[/let]
[/for]

# Mistake types
[for(mT : MistakeType | mistakeTypes(learningCorpus))]
[let lhs : String = underscorify(mT.name)
  + ': MistakeType'
]
[let rhs : String = '_MTS["' + mT.name + '"]']
[let mtDecl : String = lhs + ' = ' + rhs]
[if (mtDecl.size() < 121)]
[mtDecl/]
[/if]
[if (mtDecl.size() > 120)]
[lhs + ' = \\\n    ' + rhs/]
[/if]
[/let] 
[/let]
[/let]
[/for]


def _make_static():
    """
    Make the mistake types and categories have static types from the generated code instead of
    dynamic pyecore types.
    """
    global _MTCS, _MTS
    for mtc in _MTCS.values(): mtc.__class__ = MistakeTypeCategory
    for mt in _MTS.values(): mt.__class__ = MistakeType


def _make_dynamic():
    """
    Make the mistake types and categories have dynamic pyecore types, the default if
    `_make_static()` is not called.
    """
    global _MTCS, _MTS, _dynamic_mtc_type, _dynamic_mt_type
    for mtc in _MTCS.values(): mtc.__class__ = _dynamic_mtc_type
    for mt in _MTS.values(): mt.__class__ = _dynamic_mt_type


_make_static()
[/file]

[file ('../../modelingassistant/pythonclient/corpus_creation.py', false, 'UTF-8')]
"""
Helper file used to create learning corpus.
"""

from learningcorpus.learningcorpus import LearningCorpus, MistakeTypeCategory, MistakeType, LearningItem


domain_modeling = LearningItem(name="DomainModeling")


def mtc(n, s=None, **kwargs) -> MistakeTypeCategory:
    "Shorthand for MistakeTypeCategory initializer."
    return MistakeTypeCategory(name=n, supercategory=s, **kwargs)


def mt(n, **kwargs) -> MistakeType:
    "Shorthand for MistakeType initializer."
    return MistakeType(name=n, **kwargs)


corpus = LearningCorpus(mistakeTypeCategories=[ '[' /]
[for(mTC : MistakeTypeCategory | learningCorpus.mistakeTypeCategories)]
  [let par : String = if (not mTC.supercategory.oclIsUndefined()) then
    ', s=' + underscorify(mTC.supercategory.name).toLower()
  else '' endif]
  [let mts : String = generatePythonMistakeTypes(mTC)]
  [let lhs : String = underscorify(mTC.name).toLower()]
  [let rhs : String = 'mtc(n="' + mTC.name + '"' + par + mts + '),']
  [let mtcDecl : String = lhs + ' := ' + rhs]
    [mtcDecl/]
  [/let] 
  [/let]
  [/let]
  [/let]
  [/let]
[/for]
[ ']' /])

domain_modeling.learningCorpus = corpus

for _mt in corpus.mistakeTypes():
    for feedback in _mt.feedbacks:
        feedback.learningCorpus = corpus


# mistake types by priority, from most to least important
mts_by_priority: list[ '[' /]MistakeType[ ']' /] = [ '[' /]
    # mistakes in an existing class
    bad_class_name_spelling,
    lowercase_class_name,
    plural_class_name,
    software_engineering_term,
    similar_class_name,
    bad_association_class_name_spelling,
    similar_association_class_name,
    regular_class_should_be_enum,
    enum_should_be_regular_class,
    wrong_enum_items,

    # mistakes in an existing attribute
    bad_attribute_name_spelling,
    plural_attribute,
    similar_attribute_name,
    #attribute_misplaced,
    wrong_attribute_type,
    attribute_should_not_be_static,
    attribute_should_be_static,

    # mistakes in an existing relationship
    infinite_recursive_dependency,
    composed_part_contained_in_more_than_one_parent,
    using_an_attribute_instead_of_an_association,
    list_attribute,
    generalization_inapplicable,
    using_association_instead_of_aggregation_composition,
    using_aggregation_composition_instead_of_association,
    using_directed_association_instead_of_undirected,
    using_undirected_association_instead_of_directed,
    using_aggregation_instead_of_composition,
    using_composition_instead_of_aggregation,
    wrong_generalization_direction,
    wrong_superclass,
    subclass_is_an_instance_of_superclass,
    non_differentiated_subclass,
    subclass_not_distinct_across_lifetime,
    inherited_feature_does_not_make_sense_for_subclass,
    other_wrong_multiplicity,
    missing_role_names,
    bad_role_name_spelling,
    similar_role_name,
    other_wrong_role_name,
    role_should_not_be_static,
    role_should_be_static,
    bad_association_name_spelling,
    similar_association_name,

    # extra items
    extra_class,
    extra_association_class,
    representing_an_action_with_an_association,
    other_extra_association,
    #attribute_duplicated,
    other_extra_attribute,

    # missing items
    missing_class,
    missing_attribute,
    missing_association_class,
    missing_generalization,
    missing_composition,
    missing_association,
    missing_aggregation,
    incomplete_containment_tree,
    missing_role_names,
    missing_association_name_when_one_was_expected,
[ ']' /]

for i, _mt in enumerate(mts_by_priority, start=1):
    _mt.priority = i
[/file]

[file ('../../modelingassistant/corpus_descriptions/README_TOC.md', false, 'UTF-8')]
[generateMarkdown(learningCorpus) /]
[/file]
[/template]
