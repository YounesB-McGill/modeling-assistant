[comment encoding = UTF-8 /]
[module generate('http://cs.mcgill.ca/sel/modelingassistant/1.0')]


[template public generateElement(aModelingAssistant : ModelingAssistant)]
[comment @main/]
[file ('File.java', false, 'UTF-8')]

import modelingassistant.util.ModelingassistantResourceFactoryImpl;

public class MistakeTypesTemplate {
  
  
  /** Map of mistake type categories by name. */
  public static final Map<String, MistakeTypeCategory> MISTAKE_TYPE_CATEGORIES_BY_NAME =
      new HashMap<String, MistakeTypeCategory>();

  /** Map of mistake types by name. */
  public static final Map<String, MistakeType> MISTAKE_TYPES_BY_NAME = new HashMap<String, MistakeType>();


  static {
    // Not included in actual mistake types file.
    disallowCallsToThisClassExceptFromTestClass();
    
    var modelingAssistant = loadModelingAssistant();
	[for(mT : MistakeType | aModelingAssistant.mistakeTypes)]
		MISTAKE_TYPES_BY_NAME.put([mT.name.replaceAll(' ','_')/], [mT/]));
	[/for]
	[for(mTC : MistakeTypeCategory | aModelingAssistant.mistaketypecategory)]
		 MISTAKE_TYPE_CATEGORIES_BY_NAME.put([mTC.name.replaceAll(' ','_')/], [mTC/]));
	[/for]
            
  }


  // Mistake type categories

 	[for(mTC : MistakeTypeCategory | aModelingAssistant.mistaketypecategory)] 
		 public static final MistakeTypeCategory [mTC.name.replaceAll(' ','_')/]  = MISTAKE_TYPE_CATEGORIES_BY_NAME.get("[mTC.name.replaceAll(' ','_')/]");
	[/for]
 

  // Mistake types
	[for(mT : MistakeType | aModelingAssistant.mistakeTypes)]
		public static final MistakeType [mT.name.replaceAll(' ','_')/] = MISTAKE_TYPES_BY_NAME.get("[mT.name.replaceAll(' ','_')/]");
	[/for]
  

  /**
   * Loads the modeling assistant instance from MODELING_ASSISTANT_WITH_MISTAKE_TYPES_PATH.
   */
  public static ModelingAssistant loadModelingAssistant() {
    ModelingassistantPackage.eINSTANCE.eClass();
    final var path = MODELING_ASSISTANT_WITH_MISTAKE_TYPES_PATH;
    var splitPath = path.split("\\.");
[comment]    var fileExtension = splitPath[splitPath.length - 1];  TODO[/comment]
    var rset = new ResourceSetImpl();
    rset.getResourceFactoryRegistry().getExtensionToFactoryMap().put(fileExtension,
        new ModelingassistantResourceFactoryImpl());
    try {
      var maResource = rset.createResource(URI.createFileURI(new File(path).getCanonicalPath()));
      maResource.load(Collections.EMPTY_MAP);
      return (ModelingAssistant) maResource.getContents().get(0);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }


  /**
   * Disallows all use of this class, except by the MistakeTypeTemplateTests test class.
   * Not included in actual mistake types file.
   */
  public static void disallowCallsToThisClassExceptFromTestClass() {
    var stack = Thread.currentThread().getStackTrace();
    Arrays.asList(stack).stream().filter(e -> e.getClassName().contains(ALLOWED_CALLER)).findFirst()
        .orElseThrow(UnsupportedOperationException::new);
  }

}
[/file]
[/template]
