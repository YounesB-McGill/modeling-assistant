// automatically generated by Xtext
grammar modelingassistant.dsl.ModelingAssistantDSL with org.eclipse.xtext.common.Terminals

import "http://cs.mcgill.ca/sel/modelingassistant/1.0" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://cs.mcgill.ca/sel/cdm/1.0" as classdiagram

Association returns classdiagram::Association:
	'Association'
	name=EString
	'{'
		'ends' '(' ends+=[classdiagram::AssociationEnd|EString] ( "," ends+=[classdiagram::AssociationEnd|EString])* ')' 
		('associationClass' associationClass=[classdiagram::Class|EString])?
	'}';



Type returns classdiagram::Type:
	Class | TypeParameter | ImplementationClass_Impl | CDBoolean | CDDouble | CDInt | CDLong | CDString | CDByte | CDFloat | CDArray | CDChar | CDEnum | CDAny | CDVoid | CDSet | CDSequence;

Classifier returns classdiagram::Classifier:
	Class | ImplementationClass_Impl | CDBoolean | CDDouble | CDInt | CDLong | CDString | CDByte | CDFloat | CDArray | CDChar | CDEnum | CDSet | CDSequence;




ObjectType returns classdiagram::ObjectType:
	Class | ImplementationClass_Impl | CDBoolean | CDDouble | CDInt | CDLong | CDString | CDByte | CDFloat | CDArray | CDChar | CDEnum | CDAny | CDVoid | CDSet | CDSequence;



EString returns ecore::EString:
	STRING | ID;

AssociationEnd returns classdiagram::AssociationEnd:
	static?='static'
	ordered?='ordered'
	'AssociationEnd'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'navigable' navigable=EBoolean
		'lowerBound' lowerBound=EInt
		'upperBound' upperBound=EInt
		('referenceType' referenceType=ReferenceType)?
		'unique' unique=EBoolean
		'type' type=[classdiagram::Type|EString]
		'assoc' assoc=[classdiagram::Association|EString]
		('qualifier' qualifier=[classdiagram::Type|EString])?
	'}';

Class returns classdiagram::Class:
	dataType?='dataType'
	abstract?='abstract'
	'Class'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum VisibilityType returns classdiagram::VisibilityType:
				public = 'public' | protected = 'protected' | private = 'private' | package = 'package';

EInt returns ecore::EInt:
	'-'? INT;

enum ReferenceType returns classdiagram::ReferenceType:
				Composition = 'Composition' | Aggregation = 'Aggregation' | Regular = 'Regular' | Qualified = 'Qualified';

TypeParameter returns classdiagram::TypeParameter:
	{classdiagram::TypeParameter}
	'TypeParameter'
	name=EString
	'{'
		('genericType' genericType=[classdiagram::ObjectType|EString])?
	'}';

ImplementationClass_Impl returns classdiagram::ImplementationClass:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'ImplementationClass'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDBoolean returns classdiagram::CDBoolean:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDBoolean'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDDouble returns classdiagram::CDDouble:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDDouble'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDInt returns classdiagram::CDInt:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDInt'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDLong returns classdiagram::CDLong:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDLong'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDString returns classdiagram::CDString:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDString'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDByte returns classdiagram::CDByte:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDByte'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDFloat returns classdiagram::CDFloat:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDFloat'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDArray returns classdiagram::CDArray:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDArray'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		'size' size=EInt
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		'type' type=[classdiagram::Type|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDChar returns classdiagram::CDChar:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDChar'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDEnum returns classdiagram::CDEnum:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDEnum'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
		'literals' '{' literals+=CDEnumLiteral ( "," literals+=CDEnumLiteral)* '}' 
	'}';

CDAny returns classdiagram::CDAny:
	{classdiagram::CDAny}
	'CDAny'
	name=EString;

CDVoid returns classdiagram::CDVoid:
	{classdiagram::CDVoid}
	'CDVoid'
	name=EString;

CDSet returns classdiagram::CDSet:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDSet'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		'type' type=[classdiagram::Type|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

CDSequence returns classdiagram::CDSequence:
	dataType?='dataType'
	abstract?='abstract'
	interface?='interface'
	'CDSequence'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'instanceClassName' instanceClassName=EString
		('superTypes' '(' superTypes+=[classdiagram::Classifier|EString] ( "," superTypes+=[classdiagram::Classifier|EString])* ')' )?
		'type' type=[classdiagram::Type|EString]
		('operations' '{' operations+=Operation ( "," operations+=Operation)* '}' )?
		('typeParameters' '{' typeParameters+=TypeParameter ( "," typeParameters+=TypeParameter)* '}' )?
		('associationEnds' '{' associationEnds+=AssociationEnd ( "," associationEnds+=AssociationEnd)* '}' )?
		('attributes' '{' attributes+=Attribute ( "," attributes+=Attribute)* '}' )?
	'}';

Operation returns classdiagram::Operation:
	abstract?='abstract'
	static?='static'
	'Operation'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'operationType' operationType=OperationType
		'returnType' returnType=[classdiagram::Type|EString]
		('parameters' '{' parameters+=Parameter ( "," parameters+=Parameter)* '}' )?
	'}';

Attribute returns classdiagram::Attribute:
	static?='static'
	'Attribute'
	name=EString
	'{'
		('visibility' visibility=VisibilityType)?
		'type' type=[classdiagram::Type|EString]
	'}';

enum OperationType returns classdiagram::OperationType:
				Normal = 'Normal' | Constructor = 'Constructor' | Destructor = 'Destructor';

Parameter returns classdiagram::Parameter:
	'Parameter'
	name=EString
	'{'
		'type' type=[classdiagram::Type|EString]
	'}';

CDEnumLiteral returns classdiagram::CDEnumLiteral:
	{classdiagram::CDEnumLiteral}
	'CDEnumLiteral'
	name=EString;
